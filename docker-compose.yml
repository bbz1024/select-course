version: "3.9"
services:
  redis:
    image: redis:6-alpine
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - Course
    env_file:
      - .env
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
  mysql:
    image: mysql:8.0-debian
    restart: unless-stopped
    ports:
      - "3306:3306"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env
    networks:
      - Course
    healthcheck:
      test: mysql ${MYSQL_DATABASE} --user=${MYSQL_USER} --password='${MYSQL_PASSWORD}' --silent --execute "SELECT 1;"
      interval: 10s
      timeout: 5s
      retries: 3
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - Course
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - Course-Rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 10s
      timeout: 5s
      retries: 5
  nginx:
    image: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      #      - ./nginx.balancer.conf:/etc/nginx/nginx.conf
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./logs/nginx:/var/log/nginx
    networks:
      - Course
  jaeger:
    image: jaegertracing/all-in-one
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:16686/search || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - Course
  consul:
    image: consul
    command: [
      "agent",
      "-dev",
      "-client=0.0.0.0"
    ]
    ports:
      - "8500:8500"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8500/v1/status/leader" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - Course
  prometheus:
    image: bitnami/prometheus:latest
    volumes:
      - ./prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      #热加载配置
      - '--web.enable-lifecycle'
      #api配置
      #- '--web.enable-admin-api'
      #历史数据最大保留时间，默认15天
      - '--storage.tsdb.retention.time=30d'
  grafana:
    image: grafana/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
  # 分布式事务状态机
  dtm:
    image: yedf/dtm:latest
    restart: unless-stopped
    ports:
      - "36789:36789"
      - "36790:36790"
    volumes:
      - ./dtm.conf.yml:/app/dtm/dtm.conf.yml
    command: [ "-c", "dtm.conf.yml" ]
  user:
    image: select-course
    restart: unless-stopped
    ports:
      - "10000:10000"
    command: [ "sh", "-c", "export BASE_HOST=`hostname -i` && ./services/user/UserService" ]
    depends_on:
      jaeger:
        condition: service_healthy
      consul:
        condition: service_healthy
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - Course
    volumes:
      - ./logs:/project/logs
  course:
    image: select-course
    restart: unless-stopped
    ports:
      - "10001:10001"
    command: [ "sh", "-c", "export BASE_HOST=`hostname -i` && ./services/course/CourseService" ]
    depends_on:
      jaeger:
        condition: service_healthy
      consul:
        condition: service_healthy
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - Course
    volumes:
      - ./logs:/project/logs
  app:
    image: select-course
    restart: unless-stopped
    ports:
      - "8888:8888"
    command: [ "sh", "-c", "export BASE_HOST=`hostname -i` && ./app" ]
    env_file:
      - .env
    networks:
      - Course
    volumes:
      - ./logs:/project/logs
    depends_on:
      jaeger:
        condition: service_healthy
      consul:
        condition: service_healthy
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      course:
        condition: service_started
      user:
        condition: service_started

networks:
  Course:
    driver: bridge
volumes:
  Course-RDB:
  Course-Mysql:
  Course-Rabbitmq: